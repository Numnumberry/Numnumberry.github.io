{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","setInfo","setOptionSelected","label1","useRef","label2","label3","type","accept","capture","onChange","setTimeout","current","focus","ref","name","id","value","style","marginBottom","event","option","target","fontWeight","marginTop","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a02b2432.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './definitions/Theme/normalize.css';\nimport './definitions/Theme/appStyles.css';\n\nfunction App() {\n  const [info, setInfo] = useState('');\n  const [optionSelected, setOptionSelected] = useState('');\n  const label1 = useRef<HTMLInputElement>(null);\n  const label2 = useRef<HTMLInputElement>(null);\n  const label3 = useRef<HTMLInputElement>(null);\n\n  const onLoadImage1 = () => {\n    setInfo('first')\n\n    setTimeout(() => {\n      if (label1 && label1.current) {\n        setInfo('both')\n        \n        label1.current.focus();\n      }\n\n    }, 500)\n  }\n\n  const onLoadImage2 = () => {\n    setInfo('first')\n\n    setTimeout(() => {\n      if (label2 && label2.current) {\n        setInfo('both')\n        \n        label2.current.focus();\n      }\n\n    }, 500)\n  }\n\n  const onLoadImage3 = () => {\n    setInfo('first')\n\n    setTimeout(() => {\n      if (label3 && label3.current) {\n        setInfo('both')\n        \n        label3.current.focus();\n      }\n\n    }, 500)\n  }\n\n  const onSelectOption = (option: string) => {\n    setOptionSelected(option)\n  }\n\n  return (\n    <div>\n      {/* <img src={''} alt={''} /> try focusing after image loads instead of wainting 500 */}\n      <input type={'file'} accept={'image/*'} capture={'environment'} onChange={onLoadImage1} />\n      <input ref={label1} type={'text'} />\n      <select name=\"cars\" id=\"cars\">\n        <option value=\"volvo\">Option 1</option>\n        <option value=\"saab\">Option 2</option>\n        <option value=\"mercedes\">Option 3</option>\n        <option value=\"audi\">Option 4</option>\n      </select>\n\n      <div style={{ marginBottom: '30px' }}></div>\n\n      <input type={'file'} accept={'image/*'} capture={'environment'} onChange={onLoadImage2} />\n      <input ref={label2} type={'text'} />\n      <select name=\"cars\" id=\"cars\">\n        <option value=\"volvo\">Option 1</option>\n        <option value=\"saab\">Option 2</option>\n        <option value=\"mercedes\">Option 3</option>\n        <option value=\"audi\">Option 4</option>\n      </select>\n\n      <div style={{ marginBottom: '30px' }}></div>\n\n      <input type={'file'} accept={'image/*'} capture={'environment'} onChange={onLoadImage3} />\n      <input ref={label3} type={'text'} />\n      <select onChange={(event) => onSelectOption(event.target.value)} name=\"cars\" id=\"cars\">\n        <option value=\"Option 1\">Option 1</option>\n        <option value=\"Option 2\">Option 2</option>\n        <option value=\"Option 3\">Option 3</option>\n        <option value=\"Option 4\">Option 4</option>\n      </select>\n\n      <div style={{ fontWeight: 'bold', marginTop: '30px' }}>HIC:</div>\n      <div style={{ marginTop: '30px' }} />\n      <span>Claim #:</span><input type='text' />\n      <div style={{ marginTop: '30px' }} />\n      <span>Date of Inpection:</span><input type='text' />\n\n      <div style={{ fontWeight: 'bold', marginTop: '30px' }}>EXTERIOR (Inspection Damage):</div>\n      <div style={{ marginTop: '30px' }} />\n      <span>Roof: Yes</span><input type={'checkbox'} /><span>   No</span><input type={'checkbox'} /><div />\n      <input type={'text'} />\n      <div style={{ marginTop: '30px' }} />\n      <span>Siding: Yes</span><input type={'checkbox'} /><span>   No</span><input type={'checkbox'} /><div />\n      <input type={'text'} />\n\n      <div style={{ marginBottom: '60px' }}></div>\n      <button>Submit Claim</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}